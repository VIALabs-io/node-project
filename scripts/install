#!/bin/bash

set -euo pipefail

export DEBIAN_FRONTEND=noninteractive

# Verify sudo access
if ! sudo -n true 2>/dev/null; then
    echo "You need sudo rights to run this script."
    exit 1
fi

echo "Installing base OS packages..."
sudo apt-get update
sudo apt-get install -y --no-install-recommends \
     apt-transport-https \
     build-essential \
     ca-certificates \
     curl \
     git \
     jq \
     libssl-dev \
     wget \
     gnupg \
     screen

if [ -z "${NVM_DIR:-}" ]; then
    export NVM_DIR="$HOME/.nvm"
fi

# Install NVM if not already installed
if [ ! -d "$NVM_DIR" ]; then
    echo "Installing NVM..."
    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
else
    echo "NVM is already installed."
fi

# Source NVM scripts for immediate use
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Install or update Node.js using NVM
echo "Installing or updating Node.js..."
nvm install node # Install the latest version of node
nvm use node # Ensure the new version is active

# Dynamically update PATH for immediate access to node and npm
export PATH="./node_modules/.bin:$PATH"
export PATH="$(npm bin -g):$PATH"

# Install tsx globally
echo "Installing tsx globally..."
npm install -g tsx

echo "Setup completed successfully. Node, npm, and tsx are ready to use."

# run npm installer
npm install

# run the configure script
./scripts/configure