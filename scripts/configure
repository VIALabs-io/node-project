#!/bin/bash

set -euo pipefail

# Color definitions
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
RESET=$(tput sgr0)

# VIÎ›Labs ASCII Art
echo "${BLUE}"
echo " _    _________       __          __          "
echo "| |  / /  _/   |     / /   ____ _/ /_  _____  "
echo "| | / // // /| |    / /   / __ \`/ __ \\/ ___/  "
echo "| |/ // // / | |   / /___/ /_/ / /_/ (__  )   "
echo "|___/___/_/  |_|  /_____/\__,_/_.___/____/    "
echo "${RESET}"

manage_env_variables() {
    if [ "$1" = "mainnet" ]; then
        NODE_ENV="production"
    else
        NODE_ENV="development"
    fi

    # Ensure .env file exists before attempting to update or read from it
    if [ ! -f ".env" ]; then
        touch ".env"
    fi

    # Update or add NODE_ENV in .env
    if grep -q "^NODE_ENV=" ".env"; then
        sed -i "/^NODE_ENV=/c\NODE_ENV=$NODE_ENV" ".env"
    else
        echo "NODE_ENV=$NODE_ENV" >> ".env"
    fi

    if grep -q "^NODE_PRIVATE_KEY=" ".env"; then
        echo "${YELLOW}NODE_PRIVATE_KEY entry exists. Do you wish to change it? If yes, enter the new NODE_PRIVATE_KEY, otherwise just press Enter.${RESET}"
        read -rs input_key
        echo ""
        if [ ! -z "$input_key" ]; then
            sed -i "/^NODE_PRIVATE_KEY=/c\NODE_PRIVATE_KEY=$input_key" ".env"
            echo "${GREEN}NODE_PRIVATE_KEY has been updated.${RESET}"
        else
            echo "${YELLOW}NODE_PRIVATE_KEY was not modified.${RESET}"
        fi
    else
        echo -n "${YELLOW}Enter NODE_PRIVATE_KEY (leave blank to generate a new one): ${RESET}"
        read -rs input_key
        echo ""
        if [ -z "$input_key" ]; then
            echo "${YELLOW}No NODE_PRIVATE_KEY found. Generating one now...${RESET}"
            key_output=$(tsx src/utils/generateEthereumKeys.ts)
            echo "$key_output" >> ".env"
            echo "${GREEN}Generated and saved new NODE_PRIVATE_KEY and NODE_PUBLIC_KEY to .env. Please securely store your keys.${RESET}"
            echo "$key_output"
        else
            echo "NODE_PRIVATE_KEY=$input_key" >> ".env"
            echo "${GREEN}NODE_PRIVATE_KEY has been manually added to .env.${RESET}"
        fi
    fi
}

merge_and_prompt_configs() {
    local example_file="$1"
    local actual_file="$2"
    
    echo "${GREEN}Configuring ${MAGENTA}$actual_file${GREEN}...${RESET}"
    if [ ! -f "$actual_file" ]; then
        echo "{}" > "$actual_file"
    fi

    local keys=$(jq -r 'keys[]' "$example_file")
    for key in $keys; do
        # Retrieve values from the actual and example files
        local current_rpc=$(jq -r ".[\"$key\"].rpc // empty" "$actual_file")
        local example_rpc=$(jq -r ".[\"$key\"].rpc" "$example_file")
        local example_id=$(jq -r ".[\"$key\"].id" "$example_file")
        local example_type=$(jq -r ".[\"$key\"].type" "$example_file")
        local example_name=$(jq -r ".[\"$key\"].name" "$example_file")

        local rpc_default="${current_rpc:-$example_rpc}"

        echo -e "\n${YELLOW}Current RPC for ${BLUE}$key${YELLOW} is: ${CYAN}${rpc_default}${RESET}"
        read -p "Enter new RPC address for ${BLUE}$key [Default: ${rpc_default}]: ${CYAN}" new_rpc
        echo "${RESET}"
        new_rpc=${new_rpc:-$rpc_default}
        
        # Update the actual file with both the existing and the new information
        jq --arg key "$key" \
           --arg rpc "$new_rpc" \
           --arg id "$example_id" \
           --arg type "$example_type" \
           --arg name "$example_name" \
           '.[$key] = {"id": $id, "type": $type, "name": $name, "rpc": $rpc}' \
           "$actual_file" > "tmp.$$" && mv "tmp.$$" "$actual_file"
    done
}

echo -e "${GREEN}Setting up chain configuration files...${RESET}"

echo -e "${YELLOW}Do you want to configure for ${BLUE}mainnet ${YELLOW}or ${MAGENTA}testnet${YELLOW}?${RESET}"
select net in "mainnet" "testnet"; do
    case $net in
        mainnet )
            MAINNET_EXAMPLE="./chain-mainnet.config.json.example"
            MAINNET_CONFIG="./chain-mainnet.config.json"
            manage_env_variables "mainnet"
            merge_and_prompt_configs "$MAINNET_EXAMPLE" "$MAINNET_CONFIG"
            break;;
        testnet )
            TESTNET_EXAMPLE="./chain-testnet.config.json.example"
            TESTNET_CONFIG="./chain-testnet.config.json"
            manage_env_variables "testnet"
            merge_and_prompt_configs "$TESTNET_EXAMPLE" "$TESTNET_CONFIG"
            break;;
        * ) echo "${RED}Invalid selection.${RESET}";;
    esac
done

echo -e "${GREEN}Configuration files and environment variables are set up successfully.${RESET}"